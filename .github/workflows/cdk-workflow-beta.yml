name: Generate and Set Environment Secrets
on:
  push:
    branches:
      - main
  workflow_dispatch: # Keep manual trigger for testing

jobs:
  set-secrets:
    runs-on: ubuntu-latest

    steps:
      - name: Determine environment
        id: env
        run: |
          if [[ ${{ github.ref }} == "refs/heads/main" ]]; then
            echo "environment=production" >> $GITHUB_OUTPUT
          else
            echo "environment=preview" >> $GITHUB_OUTPUT
          fi

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Generate credentials
        id: generate-creds
        run: |
          # Generate credentials with environment prefix for easier tracking
          ENV_PREFIX="${{ steps.env.outputs.environment }}"

          echo '{
            "accessKey": "'${ENV_PREFIX}_$(openssl rand -hex 20)'",
            "secretKey": "'${ENV_PREFIX}_$(openssl rand -hex 32)'"
          }' > credentials.json

          # Set outputs for next step
          echo "access_key=$(jq -r .accessKey credentials.json)" >> $GITHUB_OUTPUT
          echo "secret_key=$(jq -r .secretKey credentials.json)" >> $GITHUB_OUTPUT

      - name: Set repository secrets
        uses: actions/github-script@v7
        env:
          ACCESS_KEY: ${{ steps.generate-creds.outputs.access_key }}
          SECRET_KEY: ${{ steps.generate-creds.outputs.secret_key }}
        with:
          script: |
            const environment = '${{ steps.env.outputs.environment }}';

            // Get the environment ID
            const { data: envs } = await github.rest.repos.getAllEnvironments({
              owner: context.repo.owner,
              repo: context.repo.repo
            });

            const env = envs.environments.find(e => e.name === environment);
            if (!env) {
              throw new Error(`Environment ${environment} not found`);
            }

            // Create/update secrets for the environment
            await github.rest.actions.createOrUpdateEnvironmentSecret({
              repository_id: context.repo.id,
              environment_name: environment,
              secret_name: 'ACCESS_KEY',
              encrypted_value: process.env.ACCESS_KEY
            });

            await github.rest.actions.createOrUpdateEnvironmentSecret({
              repository_id: context.repo.id,
              environment_name: environment,
              secret_name: 'SECRET_KEY',
              encrypted_value: process.env.SECRET_KEY
            });

            console.log(`Successfully set secrets for ${environment} environment`);
